from django.contrib.auth.models import User
from django.db import models


#######################################################################
# –º–æ–¥–µ–ª–∏, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ XML
#######################################################################

# –¥–µ–∫–ª–∞—Ä–∞–Ω—Ç, –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –ø–æ –¢–¢ –ï–ê–≠–°
#from declarant.refresh_records import refresh_db


class DeclarantCarrier(models.Model):
    SubjectBriefName = models.CharField(max_length=120, blank=False)
    TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    RegionName = models.CharField(max_length=120, blank=True, null=True)
    CityName = models.CharField(max_length=120, blank=False)
    StreetName = models.CharField(max_length=120, blank=False)
    BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    RoomNumberId = models.CharField(max_length=20, blank=True, null=True)


# –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞—Ç–µ–ª—å
class ConsignorConsignee(models.Model):
    SubjectBriefName = models.CharField(max_length=120, blank=False)
    TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    RegionName = models.CharField(max_length=120, blank=True, null=True)
    CityName = models.CharField(max_length=120, blank=False)
    StreetName = models.CharField(max_length=120, blank=False)
    BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    RoomNumberId = models.CharField(max_length=20, blank=True, null=True)


# –õ–∏—Ü–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–µ –ü–ò
class PIDeclarant(models.Model):
    SubjectBriefName = models.CharField(max_length=120, blank=False)
    TaxpayerId = models.CharField(max_length=20, blank=False, null=True)
    UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    RegionName = models.CharField(max_length=120, blank=True, null=True)
    CityName = models.CharField(max_length=120, blank=False)
    StreetName = models.CharField(max_length=120, blank=False)
    BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    RoomNumberId = models.CharField(max_length=20, blank=True, null=True)
    RegistrationNumberId = models.CharField(max_length=50, blank=False)


# –≤–æ–¥–∏—Ç–µ–ª—å (–∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª –¥–ª—è –¢–î)
class CarrierRepresentative(models.Model):
    FirstName = models.CharField(max_length=120, blank=False)
    MiddleName = models.CharField(max_length=120, blank=True, null=True)
    LastName = models.CharField(max_length=120, blank=False)
    PositionName = models.CharField(max_length=120, default='–í–û–î–ò–¢–ï–õ–¨')
    UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    IdentityDocKindCode = models.CharField(max_length=7, blank=False)
    DocId = models.CharField(max_length=50, blank=False)
    DocCreationDate = models.DateField(blank=False)
    DocValidityDate = models.DateField(blank=True, null=True)
    # –Ω–∏–∂–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞ –¢–î
    QualificationCertificateId = models.CharField(max_length=6, blank=True, null=True)
    POA_DocKindCode = models.CharField(max_length=5, blank=True, null=True)
    POA_DocId = models.CharField(max_length=50, blank=True, null=True)
    POA_DocCreationDate = models.DateField(blank=True, null=True)
    POA_DocValidityDate = models.DateField(blank=True, null=True)

# —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
class Transport(models.Model):
    TransportMeansRegId = models.CharField(max_length=40, blank=False)
    countryCode = models.CharField(max_length=2, blank=False)
    VehicleId = models.CharField(max_length=40, blank=False)
    TransportTypeCode = models.CharField(max_length=3, blank=False)
    VehicleMakeCode = models.CharField(max_length=3, blank=False)
    VehicleMakeName = models.CharField(max_length=25, blank=False)
    VehicleModelName = models.CharField(max_length=250, blank=True, null=True)
    DocId = models.CharField(max_length=50, blank=True, null=True)
    Carrier = models.ForeignKey(DeclarantCarrier, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('TransportMeansRegId', 'Carrier', 'TransportTypeCode')


class TreeTnved(models.Model):
    #ParentID - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ null –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    ParentID = models.ForeignKey('self', null=True, on_delete=models.CASCADE)

    # Name - –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞
    Name = models.CharField(max_length=1000, blank=False)

    # Code - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!)
    Code = models.CharField(max_length=13, null=True)

    # DateFrom - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. YYYY-MM-DD.
    DateFrom = models.DateTimeField(null=True)

    # DateTo - –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. YYYY-MM-DD.
    DateTo = models.DateTimeField(null=True)


# –∫–æ–¥—ã –¢–ù –í–≠–î –∏ —Ç–∞—Ä–∏—Ñ—ã
class Tnved(models.Model):
    TreeID = models.ForeignKey(TreeTnved, on_delete=models.CASCADE)
    Name = models.CharField(max_length=1000, blank=False)    # "—á–∏—Å—Ç–æ–ø–æ—Ä–æ–¥–Ω—ã–µ –ø–ª–µ–º–µ–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: ü°∫ –∫–æ—Ä–æ–≤—ã",
    Code = models.CharField(max_length=13, blank=False)     # "0102 21 300 0",

    # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞ –¥–∞—Ç—É –∑–∞–ø—Ä–æ—Å–∞.
    # –ù–∞–ø—Ä–∏–º–µ—Ä "5%", "15%, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 0,15 EUR –∑–∞ 1–∫–≥", "8,2% –ø–ª—é—Å 0,4 EUR –∑–∞ 1 —à—Ç" –∏ —Ç.–ø.
    TariffText = models.CharField(max_length=50, blank=False)

    # –∞–¥–≤–∞–ª–æ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
    # –ï—Å–ª–∏ –∞–¥–≤–∞–ª–æ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    TariffAdvalor = models.FloatField(null=True, blank=True)

    # —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã.
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    TariffSpecific = models.FloatField(null=True, blank=True)

    # –≤–∞–ª—é—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä—ë—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, "EUR", "USD" –∏ —Ç.–ø.
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    TariffSpecificCurrency = models.CharField(max_length=3, null=True, blank=True)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è
    # —Å—Ç–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    TariffSpecificMeasureAmount = models.DecimalField(null=True, blank=True, max_digits=8, decimal_places=2)

    # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ
    # —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä "–∫–≥", "—à—Ç" –∏ —Ç.–ø.
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    TariffSpecificMeasureUnit = models.CharField(null=True, max_length=20, blank=True)

    # –ü—Ä–∏–∑–Ω–∞–∫ —Å–ª–æ–∂–µ–Ω–∏—è –∞–¥–≤–∞–ª–æ—Ä–Ω–æ–π –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–≤–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –æ–±–µ —Å—Ç–∞–≤–∫–∏ –∏ —ç—Ç–æ –ø–æ–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ "1", —Ç–æ —Ç–∞—Ä–∏—Ñ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω
    # –≤ –≤–∏–¥–µ "X% –ø–ª—é—Å Y [–≤–∞–ª—é—Ç–∞] –∑–∞ Z [–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è]". –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –æ–±–µ —Å—Ç–∞–≤–∫–∏ –∏ —ç—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
    # —Ç–æ —Ç–∞—Ä–∏—Ñ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –≤ –≤–∏–¥–µ "X%, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ Y [–≤–∞–ª—é—Ç–∞] –∑–∞ Z [–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è]".
    TariffSpecificAddedToAdvalor = models.CharField(null=True, max_length=1, blank=True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä "–∫–≥", "—à—Ç" –∏ —Ç.–ø.
    # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∫ –∫–æ–¥—É –¢–ù–í–≠–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    AdditionalMeasureUnit = models.CharField(null=True, max_length=20, blank=True)

    # –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è (1 = –¥–∞) –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤—ã—Ö –ø–æ—à–ª–∏–Ω –¥–ª—è –∫–æ–¥–∞ –¢–ù–í–≠–î.
    # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å R12.
    # –ï—Å–ª–∏ –∞–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤—ã–µ –ø–æ—à–ª–∏–Ω—ã –∫ –∫–æ–¥—É –¢–ù–í–≠–î –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    Ad = models.CharField(null=True, max_length=1, blank=True)

    # –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è (1 = –¥–∞) –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –∫–æ–¥–∞ –¢–ù–í–≠–î.
    # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å R12.
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∫ –∫–æ–¥—É –¢–ù–í–≠–î –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    Sp = models.CharField(null=True, max_length=1, blank=True)

    # –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è (1 = –¥–∞) –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –ë–µ–ª–∞—Ä—É—Å—å –∞–∫—Ü–∏–∑–æ–≤ –¥–ª—è –∫–æ–¥–∞ –¢–ù–í–≠–î.
    # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å R12.
    # –ï—Å–ª–∏ –∞–∫—Ü–∏–∑—ã –∫ –∫–æ–¥—É –¢–ù–í–≠–î –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    Ex = models.CharField(null=True, max_length=1, blank=True)

    # –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è (1 = –¥–∞) –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –ë–µ–ª–∞—Ä—É—Å—å –∑–∞–ø–∏—Å–µ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
    # –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–¥–∞ –¢–ù–í–≠–î. –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å R12.
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∫ –∫–æ–¥—É –¢–ù–í–≠–î –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    Ip = models.CharField(null=True, max_length=1, blank=True)

    # –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞ —Å–±–æ—Ä–∞ –∑–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    F = models.DecimalField(null=True, blank=True, max_digits=8, decimal_places=2)

    # –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è (1 = –¥–∞) –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –ë–µ–ª–∞—Ä—É—Å—å –∫–æ–¥–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    # –¥–ª—è –∫–æ–¥–∞ –¢–ù–í–≠–î. –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∞–¥—Ä–µ—Å –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑–∞–Ω –≤ –ø–æ–ª–µ URL
    # –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å R12. –ï—Å–ª–∏ –∫–æ–¥—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –∫–æ–¥—É –¢–ù–í–≠–î –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã,
    # —ç—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    Ta = models.CharField(null=True, max_length=1, blank=True)

    # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –¢–ù–í–≠–î, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. YYYY-MM-DD.
    DateFrom = models.DateField(null=True)

    # –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –¢–ù–í–≠–î, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. YYYY-MM-DD.
    DateTo = models.DateField(null=True)


# –∞–∫—Ü–∏–∑—ã –¥–ª—è –∫–æ–¥–æ–≤ –¢–ù –í–≠–î
class Excise(models.Model):
    # —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–æ–π –∫–æ–¥–æ–≤ –¢–ù –í–≠–î
    TnvedID = models.ForeignKey(Tnved, on_delete=models.CASCADE)

    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∑–∞
    Name = models.CharField(max_length=1000, blank=False)

    # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞–≤–∫–∏ –∞–∫—Ü–∏–∑–∞
    DateFrom = models.DateField(null=True)

    # –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞–≤–∫–∏ –∞–∫—Ü–∏–∑–∞
    DateTo = models.DateField(null=True)

    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∞–∫—Ü–∏–∑–∞
    Rate = models.FloatField(null=True, blank=True)

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä—ë—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤–∞–ª—é—Ç
    Currency = models.CharField(max_length=3, blank=True)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∞–∫—Ü–∏–∑–∞
    Amount = models.DecimalField(null=True, blank=True, max_digits=8, decimal_places=2)

    # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∞–∫—Ü–∏–∑–∞, –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.
    # –ù–∞–ø—Ä–∏–º–µ—Ä ‚Äú–∫–≥‚Äù, ‚Äú—à—Ç‚Äù –∏ —Ç.–ø.
    MeasureUnit = models.CharField(null=True, max_length=20, blank=True)

    # –ü–æ–ª–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∞–∫—Ü–∏–∑–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è). –ù–∞–ø—Ä–∏–º–µ—Ä ‚Äú0,15 EUR –∑–∞ 1–∫–≥‚Äù
    RateText = models.CharField(max_length=100, blank=False)


#######################################################################
# –º–æ–¥–µ–ª–∏, –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é XML
#######################################################################

# –ø–µ—Ä–µ—Ü–µ–ø–∫–∏
class Transhipment(models.Model):
    CargoOperationKindCode = models.CharField(max_length=1, blank=True, null=True)
    ContainerIndicator = models.CharField(max_length=1, blank=False)
    CACountryCode = models.CharField(max_length=2, blank=False)
    ShortCountryName = models.CharField(max_length=40, blank=False)
    PlaceName = models.CharField(max_length=120, blank=True, null=True)
    CustomsOfficeCode = models.CharField(max_length=43, blank=True, null=True)
    CustomsOfficeName = models.CharField(max_length=50, blank=True, null=True)
    UnifiedTransportModeCode = models.CharField(max_length=2, blank=False)
    RegistrationNationalityCode = models.CharField(max_length=2, blank=False)
    TransportMeansQuantity = models.IntegerField(blank=False)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    xml = models.ForeignKey('XMLModel', on_delete=models.CASCADE)


# —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ—Ü–µ–ø–∫–µ
class TransportTranshipment(models.Model):
    TransportMeansRegId = models.CharField(max_length=40, blank=False)
    countryCode = models.CharField(max_length=2, blank=False)
    TransportTypeCode = models.CharField(max_length=3, blank=False)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    transhipment_xml = models.ForeignKey(Transhipment, on_delete=models.CASCADE)


# –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –ø–µ—Ä–µ—Ü–µ–ø–∫–µ
class ContainerTranshipment(models.Model):
    ContainerId = models.CharField(max_length=17, blank=False)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    transhipment_xml = models.ForeignKey(Transhipment, on_delete=models.CASCADE)


# –≥–∞—Ä–∞–Ω—Ç—ã –≤ XML
class TransitGuarantee(models.Model):
    TransitGuaranteeMeasureCode = models.CharField(max_length=2, blank=False)
    GuaranteeAmount = models.DecimalField(blank=True, null=True, max_digits=11, decimal_places=1)
    currencyCode = models.CharField(max_length=3, blank=True, default='BYN', null=True)
    # —Å–µ–∫—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    GC_CustomsOfficeCode = models.CharField(max_length=8, blank=True, null=True)
    GC_DocCreationDate = models.DateField(blank=True, null=True)
    GC_CustomsDocumentId = models.CharField(max_length=10, blank=True, null=True)
    # —Å–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    RD_UnifiedCountryCode = models.CharField(max_length=2, blank=True, null=True)
    RD_RegistrationNumberId = models.CharField(max_length=50, blank=True, null=True)
    # —Å–µ–∫—Ü–∏—è –¥–ª—è —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è
    ES_SubjectBriefName = models.CharField(max_length=120, blank=True, null=True)
    ES_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    ES_BankId = models.CharField(max_length=9, blank=True, null=True)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    xml = models.ForeignKey('XMLModel', on_delete=models.CASCADE)


# —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ XML
class TransportXML(models.Model):
    TransportMeansRegId = models.CharField(max_length=40, blank=False)
    countryCode = models.CharField(max_length=2, blank=False)
    VehicleId = models.CharField(max_length=40, blank=False)
    TransportTypeCode = models.CharField(max_length=3, blank=False)
    VehicleMakeCode = models.CharField(max_length=3, blank=False)
    VehicleMakeName = models.CharField(max_length=25, blank=False, null=True)
    VehicleModelName = models.CharField(max_length=250, blank=True, null=True)
    DocId = models.CharField(max_length=50, blank=True, null=True)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    xml = models.ForeignKey('XMLModel', on_delete=models.CASCADE)


# –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ XML
class ContainerXML(models.Model):
    ContainerId = models.CharField(max_length=17, blank=False)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    xml = models.ForeignKey('XMLModel', on_delete=models.CASCADE)


# —Ç–æ–≤–∞—Ä—ã –≤ XML
class ConsignmentItem(models.Model):
    ConsignmentItemOrdinal = models.PositiveIntegerField(blank=False)
    CommodityCode = models.CharField(max_length=10, blank=True, null=True)
    GoodsDescriptionText = models.CharField(max_length=250, blank=True, null=True)
    GoodsDescriptionText1 = models.CharField(max_length=250, blank=True, null=True)
    GoodsDescriptionText2 = models.CharField(max_length=250, blank=True, null=True)
    GoodsDescriptionText3 = models.CharField(max_length=250, blank=True, null=True)
    UnifiedGrossMassMeasure = models.DecimalField(blank=True, null=True, max_digits=17, decimal_places=6)
    measurementUnitCode = models.CharField(max_length=3, blank=True, default='166')
    # GoodsMeasureDetails
    GM_GoodsMeasure = models.DecimalField(blank=True, null=True, max_digits=17, decimal_places=6)
    GM_measurementUnitCode = models.CharField(max_length=3, blank=True, null=True)
    GM_MeasureUnitAbbreviationCode = models.CharField(max_length=20, blank=True, null=True)
    # AddGoodsMeasureDetails
    AGM_GoodsMeasure = models.DecimalField(blank=True, null=True, max_digits=17, decimal_places=6)
    AGM_measurementUnitCode = models.CharField(max_length=3, blank=True, null=True)
    AGM_MeasureUnitAbbreviationCode = models.CharField(max_length=20, blank=True, null=True)
    # CargoPackagePalletDetails
    PackageAvailabilityCode = models.CharField(max_length=1, default='0')
    CargoQuantity = models.PositiveIntegerField(blank=False)
    CargoPackageInfoKindCode = models.CharField(max_length=1, default='0')
    PackageKindCode = models.CharField(max_length=2, blank=False)
    PackageQuantity = models.PositiveIntegerField(blank=False)
    # —Å—Ç–æ–∏–º–æ—Å—Ç—å
    CAValueAmount = models.DecimalField(blank=True, null=True, max_digits=17, decimal_places=2)
    currencyCode = models.CharField(max_length=3, blank=True, null=True)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    xml = models.ForeignKey('XMLModel', on_delete=models.CASCADE)

    # –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –≤ –¢–îrgnm
    GoodsTraceabilityCode = models.CharField(max_length=1, blank=True, null=True)
    LicenseGoodsKindCode = models.CharField(max_length=1, blank=True, null=True)
    # –∫–æ–ª-–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    TM_GoodsMeasure = models.DecimalField(blank=True, null=True, max_digits=17, decimal_places=6)
    TM_measurementUnitCode = models.CharField(max_length=3, blank=True, null=True)
    TM_MeasureUnitAbbreviationCode = models.CharField(max_length=20, blank=True, null=True)
    # —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    CustomsValueAmount = models.DecimalField(blank=True, null=True, max_digits=17, decimal_places=2)
    CV_currencyCode = models.CharField(max_length=3, blank=True, null=True, default='BYN')

# –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ç–æ–≤–∞—Ä–µ
class ContainerCI(models.Model):
    ContainerId = models.CharField(max_length=17, blank=False)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ —Ç–æ–≤–∞—Ä
    ci = models.ForeignKey(ConsignmentItem, on_delete=models.CASCADE)


# –ø—Ä–µ–¥—à–µ–¥—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
class PIPrecedingDocDetails(models.Model):
    DocKindCode = models.CharField(max_length=5, blank=False)
    DocId = models.CharField(max_length=50, blank=False)
    DocCreationDate = models.DateField(blank=False)
    ConsignmentItemOrdinal = models.PositiveIntegerField(blank=True, null=True)  # —Ç–æ–ª—å–∫–æ –¥–ª—è –¢–î
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ —Ç–æ–≤–∞—Ä
    ci = models.ForeignKey(ConsignmentItem, on_delete=models.CASCADE)

# –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ç–æ–≤–∞—Ä–µ
class PIGoodsDocDetails(models.Model):
    DocKindCode = models.CharField(max_length=5, blank=False)
    DocId = models.CharField(max_length=50, blank=False)
    DocCreationDate = models.DateField(blank=False)
    # –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ —Ç–æ–≤–∞—Ä
    ci = models.ForeignKey(ConsignmentItem, on_delete=models.CASCADE)


# –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ XML
class XMLModel(models.Model):
    user = models.ForeignKey(User, on_delete=models.SET_DEFAULT, default=1)
    XmlType = models.CharField(max_length=4, blank=False, default='PIAT')
    EDocCode = models.CharField(max_length=10, default='R.042')
    EDocId = models.CharField(max_length=36, blank=False)
    EDocDateTime = models.DateTimeField(auto_now_add=True)
    EDocIndicatorCode = models.CharField(max_length=2, blank=False)
    PreliminaryInformationUsageCode1 = models.CharField(max_length=2, blank=False, default='01')
    PreliminaryInformationUsageCode2 = models.CharField(max_length=2, blank=False, default='06')
    PreliminaryInformationUsageCode3 = models.CharField(max_length=2, blank=False, default='14')

    # PIATEntryCheckPointDetails
    ECP_CustomsOfficeCode = models.CharField(max_length=8, blank=True, null=True)
    ECP_BorderCheckpointName = models.CharField(max_length=50, blank=True, null=True)

    # PIDeclarantDetails
    PIDeclarant_SubjectBriefName = models.CharField(max_length=120, blank=False)
    PIDeclarant_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    PIDeclarant_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    PIDeclarant_RegionName = models.CharField(max_length=120, blank=True, null=True)
    PIDeclarant_CityName = models.CharField(max_length=120, blank=False)
    PIDeclarant_StreetName = models.CharField(max_length=120, blank=False)
    PIDeclarant_BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    PIDeclarant_RoomNumberId = models.CharField(max_length=20, blank=True, null=True)
    PIDeclarant_RegistrationNumberId = models.CharField(max_length=50, blank=False)

    # PIATBorderTransportDetails –∏ PITransitTransportMeansDetails
    UnifiedTransportModeCode = models.CharField(max_length=2, blank=False)
    TransportMeansQuantity = models.PositiveSmallIntegerField(blank=False)
    ContainerIndicator = models.CharField(max_length=1, default='0')
    Transport_EqualIndicator = models.CharField(max_length=1, default='1')

    # TIRCarnetIdDetails
    TIRCarnetIndicator = models.CharField(max_length=1, blank=False)
    TIRSeriesId = models.CharField(max_length=2, blank=True, null=True)
    TIRId = models.CharField(max_length=8, blank=True, null=True)
    TIRPageOrdinal = models.PositiveSmallIntegerField(blank=True, null=True)
    TIRHolderId = models.CharField(max_length=18, blank=True, null=True)

    DeclarationKindCode = models.CharField(max_length=10, blank=False)
    TransitProcedureCode = models.CharField(max_length=10, blank=False)
    TransitFeatureCode = models.CharField(max_length=10, blank=True, null=True)

    LoadingListsQuantity = models.PositiveIntegerField(blank=True, null=True)
    LoadingListsPageQuantity = models.PositiveIntegerField(blank=True, null=True)
    GoodsQuantity = models.PositiveIntegerField(blank=False)
    CargoQuantity = models.PositiveIntegerField(blank=False)
    SealQuantity = models.PositiveIntegerField(blank=True, null=True)
    SealId = models.CharField(max_length=120, blank=True, null=True)

    # TransitTerminationDetails
    TT_CustomsOfficeCode = models.CharField(max_length=8, blank=False)
    TT_CustomsOfficeName = models.CharField(max_length=50, blank=False)
    TT_CustomsControlZoneId = models.CharField(max_length=50, blank=True, null=True)
    TT_UnifiedCountryCode = models.CharField(max_length=2, blank=False, null=True)

    # PIATTransportDocumentDetails
    TD_DocKindCode = models.CharField(max_length=5, blank=True)
    TD_DocId = models.CharField(max_length=50, blank=True)
    TD_DocCreationDate = models.DateField(blank=True, null=True)

    # DepartureCountryDetails
    DepartureCountry_CACountryCode = models.CharField(max_length=2, blank=False)
    DepartureCountry_ShortCountryName = models.CharField(max_length=40, blank=False)

    # DestinationCountryDetails
    DestinationCountry_CACountryCode = models.CharField(max_length=2, blank=False)
    DestinationCountry_ShortCountryName = models.CharField(max_length=40, blank=False)

    CAInvoiceValueAmount = models.DecimalField(blank=False, default=0, max_digits=17, decimal_places=2)
    IVA_currencyCode = models.CharField(max_length=3, blank=False, default='EUR')
    UnifiedGrossMassMeasure = models.DecimalField(blank=False, default=0, max_digits=17, decimal_places=6)
    measurementUnitCode = models.CharField(max_length=3, blank=False, default='166')

    # –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨
    # PIATConsignorDetails
    Consignor_SubjectBriefName = models.CharField(max_length=120, blank=False)
    Consignor_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    Consignor_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    Consignor_RegionName = models.CharField(max_length=120, blank=True, null=True)
    Consignor_CityName = models.CharField(max_length=120, blank=False)
    Consignor_StreetName = models.CharField(max_length=120, blank=False)
    Consignor_BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    Consignor_RoomNumberId = models.CharField(max_length=20, blank=True, null=True)

    # –ü–û–õ–£–ß–ê–¢–ï–õ–¨
    # PIATConsigneeDetails
    Consignee_SubjectBriefName = models.CharField(max_length=120, blank=False)
    Consignee_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    Consignee_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    Consignee_RegionName = models.CharField(max_length=120, blank=True, null=True)
    Consignee_CityName = models.CharField(max_length=120, blank=False)
    Consignee_StreetName = models.CharField(max_length=120, blank=False)
    Consignee_BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    Consignee_RoomNumberId = models.CharField(max_length=20, blank=True, null=True)

    # –î–ï–ö–õ–ê–†–ê–ù–¢
    # PITransitDeclarantDetails
    TransitDeclarant_EqualIndicator = models.CharField(max_length=1, default='0')
    TransitDeclarant_SubjectBriefName = models.CharField(max_length=120, blank=False)
    TransitDeclarant_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    TransitDeclarant_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    TransitDeclarant_RegionName = models.CharField(max_length=120, blank=True, null=True)
    TransitDeclarant_CityName = models.CharField(max_length=120, blank=False)
    TransitDeclarant_StreetName = models.CharField(max_length=120, blank=False)
    TransitDeclarant_BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    TransitDeclarant_RoomNumberId = models.CharField(max_length=20, blank=True, null=True)

    # –ü–ï–†–ï–í–û–ó–ß–ò–ö –ü–û –¢–¢ –ï–ê–≠–°
    # PIUnionCarrierDetails
    UnionCarrier_SubjectBriefName = models.CharField(max_length=120, blank=False)
    UnionCarrier_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    UnionCarrier_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    UnionCarrier_RegionName = models.CharField(max_length=120, blank=True, null=True)
    UnionCarrier_CityName = models.CharField(max_length=120, blank=False)
    UnionCarrier_StreetName = models.CharField(max_length=120, blank=False)
    UnionCarrier_BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    UnionCarrier_RoomNumberId = models.CharField(max_length=20, blank=True, null=True)

    # –ü–ï–†–ï–í–û–ó–ß–ò–ö
    # CarrierRepresentativeDetails
    CarrierRepresentative_FirstName = models.CharField(max_length=120, blank=False)
    CarrierRepresentative_MiddleName = models.CharField(max_length=120, blank=True, null=True)
    CarrierRepresentative_LastName = models.CharField(max_length=120, blank=False)
    CarrierRepresentative_PositionName = models.CharField(max_length=120, default='–í–û–î–ò–¢–ï–õ–¨')
    CarrierRepresentative_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    CarrierRepresentative_IdentityDocKindCode = models.CharField(max_length=7, blank=True, null=True)
    CarrierRepresentative_DocId = models.CharField(max_length=50, blank=False)
    CarrierRepresentative_DocCreationDate = models.DateField(blank=False)
    CarrierRepresentative_DocValidityDate = models.DateField(blank=True, null=True)
    CarrierRepresentative_RoleCode = models.CharField(max_length=1, default='1')

    # PIATCarrierDetails
    Carrier_SubjectBriefName = models.CharField(max_length=120, blank=False)
    Carrier_TaxpayerId = models.CharField(max_length=20, blank=True, null=True)
    Carrier_UnifiedCountryCode = models.CharField(max_length=2, blank=False)
    Carrier_RegionName = models.CharField(max_length=120, blank=True, null=True)
    Carrier_CityName = models.CharField(max_length=120, blank=False)
    Carrier_StreetName = models.CharField(max_length=120, blank=False)
    Carrier_BuildingNumberId = models.CharField(max_length=50, blank=True, null=True)
    Carrier_RoomNumberId = models.CharField(max_length=20, blank=True, null=True)

    # –ø–æ–ª—è, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¢–î
    SD_RegisterDocumentIdDetails_DocKindCode = models.CharField(max_length=5, null=True)
    SD_RegisterDocumentIdDetails_RegistrationNumberId = models.CharField(max_length=50, null=True)
    SD_RepresentativeContractDetails_DocKindCode = models.CharField(max_length=5, null=True)
    SD_RepresentativeContractDetails_DocId = models.CharField(max_length=50, null=True)
    SD_RepresentativeContractDetails_DocCreationDate = models.DateField(blank=True, null=True)
    SD_RepresentativeContractDetails_UnifiedCountryCode = models.CharField(max_length=2, blank=True, null=True)

    SP_FirstName = models.CharField(max_length=120, blank=True, null=True)
    SP_MiddleName = models.CharField(max_length=120, blank=True, null=True)
    SP_LastName = models.CharField(max_length=120, blank=True, null=True)
    SP_PositionName = models.CharField(max_length=120, blank=True, null=True)
    SP_UnifiedCountryCode = models.CharField(max_length=2, blank=True, null=True)
    SP_IdentityDocKindCode = models.CharField(max_length=7, blank=True, null=True)
    SP_DocId = models.CharField(max_length=50, blank=True, null=True)
    SP_DocCreationDate = models.DateField(blank=True, null=True)
    SP_DocValidityDate = models.DateField(blank=True, null=True)
    SP_QualificationCertificateId = models.CharField(max_length=6, blank=True, null=True)
    SP_POA_DocKindCode = models.CharField(max_length=5, blank=True, null=True)
    SP_POA_DocId = models.CharField(max_length=50, blank=True, null=True)
    SP_POA_DocCreationDate = models.DateField(blank=True, null=True)
    SP_POA_DocValidityDate = models.DateField(blank=True, null=True)

    #–ö–æ–Ω—Ç–∞–∫—Ç—ã
    CD_CommunicationChannelCode = models.CharField(max_length=2, blank=True, null=True)
    CD_CommunicationChannelName = models.CharField(max_length=50, blank=True, null=True)
    CD_CommunicationChannelId = models.CharField(max_length=100, blank=True, null=True)

    TD_ExchangeRate = models.DecimalField(blank=False, default=0, max_digits=10, decimal_places=4)
    TD_ER_currencyCode = models.CharField(max_length=3, blank=False, default='EUR')
    TD_ER_scaleNumber = models.CharField(max_length=6, blank=False, default='0')
    TD_CustomsValueAmount = models.DecimalField(blank=False, default=0, max_digits=17, decimal_places=2)
    TD_CV_currencyCode = models.CharField(max_length=3, blank=False, default='BYN')

    transport_list = models.CharField(max_length=50, blank=True, null=True)

    def save(self, need_refresh=True, *args, **kwargs):
        super().save(*args, **kwargs)  # Call the "real" save() method.
        if need_refresh:
            refresh_db(self.id)



#######################################################################
# –º–æ–¥–µ–ª–∏, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
#######################################################################

# –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –ù–ë–†–ë
class ExchangeRatesNBRB(models.Model):
    Cur_ID = models.PositiveIntegerField(blank=False)
    Date = models.DateTimeField(null=False)
    Cur_Abbreviation = models.CharField(max_length=3, blank=False)
    Cur_Scale = models.IntegerField(blank=False)
    Cur_Name = models.CharField(max_length=255, blank=False)
    Cur_OfficialRate = models.DecimalField(blank=False, max_digits=10, decimal_places=4)

    class Meta:
        unique_together = ('Cur_ID', 'Date',)


# –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ–≤–∞—Ä—è nsmap
# (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è XML)
class NsMap(models.Model):
    xml_type = models.CharField(max_length=4, null=False, blank=False)  # —Ç–∏–ø xml ("–≠–ü–ò", "–¢–î")
    name_field = models.CharField(max_length=15, null=False, blank=False)    # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (csdo, cacdo, atpi ...)
    text_field = models.CharField(max_length=70, null=False, blank=False)   # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–∏–º–µ—Ä "urn:EEC:M:SimpleDataObjects:v0.4.11")
    date_end = models.DateField(null=False)     # –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –≤ —Å—Ç–∞—Ä–æ–º –º–µ–Ω—è–µ–º –¥–∞—Ç—É


# —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ü–¢–û
class Pto(models.Model):
    CODE = models.CharField(max_length=8, null=False, blank=False)
    NAME = models.CharField(max_length=50, null=False, blank=False)
    COUNTRYCODEDIG = models.CharField(max_length=3, null=False, blank=False)
    COUNTRYCODELIT = models.CharField(max_length=2, null=False, blank=False)


class Sanction(models.Model):
    type = models.CharField(max_length=15, null=False, blank=False)
    code = models.CharField(max_length=10, null=False, blank=False)
    name_r = models.CharField(max_length=1000, null=False, blank=False)
    country = models.CharField(max_length=3, null=True, blank=True)
    sanction_type = models.CharField(max_length=30, null=True, blank=True)
    sanction_descr = models.CharField(max_length=700, null=True, blank=True)
    note = models.CharField(max_length=320, null=True, blank=True)


class DeclarantOrgInfo(models.Model):
    SubjectBriefName = models.CharField(max_length=200, null=False, blank=False)
    TaxpayerId = models.CharField(max_length=12, null=False, blank=False)
    UnifiedCountryCode = models.CharField(max_length=3, null=False, blank=False)
    RegionName = models.CharField(max_length=120, null=True, blank=True)
    CityName = models.CharField(max_length=120, null=False, blank=False)
    StreetName = models.CharField(max_length=120, null=False, blank=False)
    BuildingNumberId = models.CharField(max_length=50, null=True, blank=True)
    RoomNumberId = models.CharField(max_length=20, null=True, blank=True)
    RegistrationNumberId = models.CharField(max_length=50, null=False, blank=False)
    Email = models.CharField(max_length=50, null=True, blank=True)
    Phone = models.CharField(max_length=50, null=False, blank=False, help_text='!!! –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375 33 6262122')

    def __str__(self):
        return self.TaxpayerId + ' ' + self.SubjectBriefName

class UserOrg(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    org = models.ForeignKey(DeclarantOrgInfo, on_delete=models.DO_NOTHING)

    def __str__(self):
        return self.org.SubjectBriefName


class DraftJSON(models.Model):
    class Meta:
        ordering = ['-id']

    user = models.ForeignKey(User, on_delete=models.SET_DEFAULT, default=1)
    note = models.CharField(max_length=50, null=True, blank=True)
    dt_add = models.DateTimeField(auto_now_add=True, blank=True)
    json_data = models.TextField(null=False)

    def __str__(self):
        return self.note

def refresh_db(xml_id):
    """
    –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö
    @param xml_id: id –∑–∞–ø–∏—Å–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """

    xml = XMLModel.objects.get(pk=xml_id)

    # –ª–∏—Ü–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–µ –ü–ò
    if xml.PIDeclarant_TaxpayerId:
        try:
            rec = PIDeclarant.objects.get(TaxpayerId=xml.PIDeclarant_TaxpayerId)
        except:
            rec = None
    else:
        try:
            rec = PIDeclarant.objects.get(
                SubjectBriefName=xml.PIDeclarant_SubjectBriefName,
                UnifiedCountryCode=xml.PIDeclarant_UnifiedCountryCode
            )
        except:
            rec = None

    if not rec:
        rec = PIDeclarant()

    rec.SubjectBriefName = xml.PIDeclarant_SubjectBriefName
    rec.TaxpayerId = xml.PIDeclarant_TaxpayerId
    rec.UnifiedCountryCode = xml.PIDeclarant_UnifiedCountryCode
    rec.RegionName = xml.PIDeclarant_RegionName
    rec.CityName = xml.PIDeclarant_CityName
    rec.StreetName = xml.PIDeclarant_StreetName
    rec.BuildingNumberId = xml.PIDeclarant_BuildingNumberId
    rec.RoomNumberId = xml.PIDeclarant_RoomNumberId
    rec.RegistrationNumberId = xml.PIDeclarant_RegistrationNumberId
    rec.save()

    # –¥–µ–∫–ª–∞—Ä–∞–Ω—Ç
    if xml.TransitDeclarant_TaxpayerId:
        try:
            rec = DeclarantCarrier.objects.get(TaxpayerId=xml.TransitDeclarant_TaxpayerId)
        except:
            rec = None
    else:
        try:
            rec = DeclarantCarrier.objects.get(
                SubjectBriefName=xml.TransitDeclarant_SubjectBriefName,
                UnifiedCountryCode=xml.TransitDeclarant_UnifiedCountryCode
            )
        except:
            rec = None

    if not rec:
        rec = DeclarantCarrier()

    rec.SubjectBriefName = xml.TransitDeclarant_SubjectBriefName
    rec.TaxpayerId = xml.TransitDeclarant_TaxpayerId
    rec.UnifiedCountryCode = xml.TransitDeclarant_UnifiedCountryCode
    rec.RegionName = xml.TransitDeclarant_RegionName
    rec.CityName = xml.TransitDeclarant_CityName
    rec.StreetName = xml.TransitDeclarant_StreetName
    rec.BuildingNumberId = xml.TransitDeclarant_BuildingNumberId
    rec.RoomNumberId = xml.TransitDeclarant_RoomNumberId
    rec.save()

    # –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –ø–æ –¢–¢ –ï–ê–≠–°
    if xml.UnionCarrier_TaxpayerId:
        try:
            rec = DeclarantCarrier.objects.get(TaxpayerId=xml.UnionCarrier_TaxpayerId)
        except:
            rec = None
    else:
        try:
            rec = DeclarantCarrier.objects.get(
                SubjectBriefName=xml.UnionCarrier_SubjectBriefName,
                UnifiedCountryCode=xml.UnionCarrier_UnifiedCountryCode
            )
        except:
            rec = None

    if not rec:
        rec = DeclarantCarrier()

    rec.SubjectBriefName = xml.UnionCarrier_SubjectBriefName
    rec.TaxpayerId = xml.UnionCarrier_TaxpayerId
    rec.UnifiedCountryCode = xml.UnionCarrier_UnifiedCountryCode
    rec.RegionName = xml.UnionCarrier_RegionName
    rec.CityName = xml.UnionCarrier_CityName
    rec.StreetName = xml.UnionCarrier_StreetName
    rec.BuildingNumberId = xml.UnionCarrier_BuildingNumberId
    rec.RoomNumberId = xml.UnionCarrier_RoomNumberId
    rec.save()

    # –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫
    if xml.Carrier_TaxpayerId:
        try:
            p_rec = DeclarantCarrier.objects.get(TaxpayerId=xml.Carrier_TaxpayerId)
        except:
            p_rec = None
    else:
        try:
            p_rec = DeclarantCarrier.objects.get(
                SubjectBriefName=xml.Carrier_SubjectBriefName,
                UnifiedCountryCode=xml.Carrier_UnifiedCountryCode
            )
        except:
            p_rec = None

    if not p_rec:
        p_rec = DeclarantCarrier()

    p_rec.SubjectBriefName = xml.Carrier_SubjectBriefName
    p_rec.TaxpayerId = xml.Carrier_TaxpayerId
    p_rec.UnifiedCountryCode = xml.Carrier_UnifiedCountryCode
    p_rec.RegionName = xml.Carrier_RegionName
    p_rec.CityName = xml.Carrier_CityName
    p_rec.StreetName = xml.Carrier_StreetName
    p_rec.BuildingNumberId = xml.Carrier_BuildingNumberId
    p_rec.RoomNumberId = xml.Carrier_RoomNumberId
    p_rec.save()

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    if xml.Consignor_TaxpayerId:
        try:
            rec = ConsignorConsignee.objects.get(TaxpayerId=xml.Consignor_TaxpayerId)
        except:
            rec = None
    else:
        try:
            rec = ConsignorConsignee.objects.get(
                SubjectBriefName=xml.Consignor_SubjectBriefName,
                UnifiedCountryCode=xml.Consignor_UnifiedCountryCode
            )
        except:
            rec = None

    if not rec:
        rec = ConsignorConsignee()

    rec.SubjectBriefName = xml.Consignor_SubjectBriefName
    rec.TaxpayerId = xml.Consignor_TaxpayerId
    rec.UnifiedCountryCode = xml.Consignor_UnifiedCountryCode
    rec.RegionName = xml.Consignor_RegionName
    rec.CityName = xml.Consignor_CityName
    rec.StreetName = xml.Consignor_StreetName
    rec.BuildingNumberId = xml.Consignor_BuildingNumberId
    rec.RoomNumberId = xml.Consignor_RoomNumberId
    rec.save()

    # –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if xml.Consignee_TaxpayerId:
        try:
            rec = ConsignorConsignee.objects.get(TaxpayerId=xml.Consignee_TaxpayerId)
        except:
            rec = None
    else:
        try:
            rec = ConsignorConsignee.objects.get(
                SubjectBriefName=xml.Consignee_SubjectBriefName,
                UnifiedCountryCode=xml.Consignee_UnifiedCountryCode
            )
        except:
            rec = None

    if not rec:
        rec = ConsignorConsignee()

    rec.SubjectBriefName = xml.Consignee_SubjectBriefName
    rec.TaxpayerId = xml.Consignee_TaxpayerId
    rec.UnifiedCountryCode = xml.Consignee_UnifiedCountryCode
    rec.RegionName = xml.Consignee_RegionName
    rec.CityName = xml.Consignee_CityName
    rec.StreetName = xml.Consignee_StreetName
    rec.BuildingNumberId = xml.Consignee_BuildingNumberId
    rec.RoomNumberId = xml.Consignee_RoomNumberId
    rec.save()

    # –≤–æ–¥–∏—Ç–µ–ª—å
    if xml.CarrierRepresentative_DocId:
        try:
            rec = CarrierRepresentative.objects.get(DocId=xml.CarrierRepresentative_DocId)
        except:
            rec = None

        if not rec:
            rec = CarrierRepresentative()

        rec.FirstName = xml.CarrierRepresentative_FirstName
        rec.MiddleName = xml.CarrierRepresentative_MiddleName
        rec.LastName = xml.CarrierRepresentative_LastName
        rec.PositionName = xml.CarrierRepresentative_PositionName
        rec.UnifiedCountryCode = xml.CarrierRepresentative_UnifiedCountryCode
        rec.IdentityDocKindCode = xml.CarrierRepresentative_IdentityDocKindCode
        rec.DocId = xml.CarrierRepresentative_DocId
        rec.DocCreationDate = xml.CarrierRepresentative_DocCreationDate
        rec.DocValidityDate = xml.CarrierRepresentative_DocValidityDate
        rec.save()

    # –ª–∏—Ü–æ, –∑–∞–ø–æ–ª–Ω—è—é—â–µ–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
    if xml.SP_DocId:
        try:
            rec = CarrierRepresentative.objects.get(DocId=xml.SP_DocId)
        except:
            rec = None

        if not rec:
            rec = CarrierRepresentative()

        rec.FirstName = xml.SP_FirstName
        rec.MiddleName = xml.SP_MiddleName
        rec.LastName = xml.SP_LastName
        rec.PositionName = xml.SP_PositionName
        rec.UnifiedCountryCode = xml.SP_UnifiedCountryCode
        rec.IdentityDocKindCode = xml.SP_IdentityDocKindCode
        rec.DocId = xml.SP_DocId
        rec.DocCreationDate = xml.SP_DocCreationDate
        rec.DocValidityDate = xml.SP_DocValidityDate
        rec.QualificationCertificateId = xml.SP_QualificationCertificateId
        rec.POA_DocKindCode = xml.SP_POA_DocKindCode
        rec.POA_DocId = xml.SP_POA_DocId
        rec.POA_DocCreationDate = xml.SP_POA_DocCreationDate
        rec.POA_DocValidityDate = xml.SP_POA_DocValidityDate
        rec.save()

    # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    ts_list = TransportXML.objects.filter(xml=xml)
    for ts in ts_list:
        try:
            rec = Transport.objects.get(
                TransportMeansRegId=ts.TransportMeansRegId,
                TransportTypeCode=ts.TransportTypeCode
            )
        except:
            rec = None

        if not rec:
            rec = Transport()

        rec.TransportMeansRegId = ts.TransportMeansRegId
        rec.countryCode = ts.countryCode
        rec.VehicleId = ts.VehicleId
        rec.TransportTypeCode = ts.TransportTypeCode
        rec.VehicleMakeCode = ts.VehicleMakeCode
        rec.VehicleMakeName = ts.VehicleMakeName
        rec.VehicleModelName = ts.VehicleModelName
        rec.DocId = ts.DocId
        rec.Carrier = p_rec
        rec.save()
